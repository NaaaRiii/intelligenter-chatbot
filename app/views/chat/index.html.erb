<div id="chat-container" class="chat-container" data-controller="chat" data-chat-conversation-id-value="<%= @conversation&.id %>" data-chat-user-id-value="<%= @current_user&.id %>" role="main">
  <!-- チャットヘッダー -->
  <header class="chat-header">
    <div class="flex items-center justify-between p-4 bg-gradient-to-r from-blue-600 to-purple-600 text-white">
      <div>
        <h1 class="text-xl font-bold">インテリジェントチャットボット</h1>
        <p class="text-sm opacity-90">AI による会話分析サポート</p>
        <span class="sr-only">アクセシビリティ用スクリーンリーダーテキスト</span>
        <span class="text-xs opacity-80">Intelligent Chatbot</span>
        <span class="ml-2 user-name"><%= @current_user&.name %></span>
        <span class="ml-2 status-text">オンライン</span>
      </div>
      <div class="flex gap-2 items-center">
        <div class="online-users"></div>
        <span class="connection-status status-indicator connected" data-chat-target="connectionStatus">
          <span class="inline-block w-2 h-2 bg-green-400 rounded-full animate-pulse"></span>
          <span class="ml-1 text-sm">接続済み</span>
        </span>
        <button type="button" class="px-2 py-1 bg-white/20 rounded" data-action="click->chat#reconnect">再接続</button>
      </div>
    </div>
  </header>

  <!-- サイドバー（プレースホルダ） -->
  <aside id="sidebar" class=""></aside>

  <!-- メッセージエリア -->
  <div id="messages-container" class="chat-messages-container flex-1 overflow-y-auto p-4 bg-gray-50" data-chat-target="messagesContainer">
    <div class="messages-list max-w-4xl mx-auto" data-chat-target="messagesList" aria-label="チャットメッセージ">
      <% @messages.each do |message| %>
        <div class="message message-<%= message.role %> <%= message.from_user? ? 'user-message' : 'assistant-message' %> mb-4 <%= message.from_user? ? 'text-right' : 'text-left' %>" data-message-id="<%= message.id %>">
          <div class="inline-block max-w-2xl">
            <div class="message-bubble <%= message.from_user? ? 'bg-blue-600 text-white' : 'bg-white' %> px-4 py-3 rounded-lg shadow-sm">
              <% unless message.from_user? %>
                <div class="assistant-header"><span class="assistant-name">Bot</span></div>
              <% end %>
              <div class="message-content">
                <%= simple_format(message.content) %>
              </div>
              <div class="timestamp message-meta text-xs <%= message.from_user? ? 'text-blue-100' : 'text-gray-500' %> mt-1">
                <%= message.created_at.strftime("%H:%M") %>
                <% if message.from_user? %><span class="ml-2 text-xs">You</span><% end %>
              </div>
              <span class="read-indicator hidden">既読</span>
              <% if message.from_user? %>
                <div class="message-options">
                  <button type="button" data-action="click->chat#deleteMessage">削除を確認</button>
                </div>
              <% end %>
            </div>
          </div>
        </div>
      <% end %>
      
      <!-- タイピングインジケーター -->
      <div id="typing-indicator" class="typing-indicator bot-typing-indicator hidden" data-chat-target="typingIndicator">
        <div class="flex items-center space-x-2 bg-white px-4 py-3 rounded-lg shadow-sm inline-block">
          <span>ボットが入力中...</span>
          <div class="typing-dot bg-gray-400 rounded-full w-2 h-2 animate-bounce"></div>
          <div class="typing-dot bg-gray-400 rounded-full w-2 h-2 animate-bounce" style="animation-delay: 0.1s"></div>
          <div class="typing-dot bg-gray-400 rounded-full w-2 h-2 animate-bounce" style="animation-delay: 0.2s"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- 入力エリア -->
  <div class="chat-input-container border-t bg-white p-4" id="message-input-container">
    <form id="message-form" class="max-w-4xl mx-auto" data-action="submit->chat#sendMessage" data-turbo="false">
      <div class="flex gap-2">
        <textarea 
          id="message-input"
          name="message[content]"
          aria-label="メッセージ入力"
          data-chat-target="messageInput"
          data-action="keydown->chat#handleKeydown input->chat#handleTyping"
          class="flex-1 px-4 py-2 border border-gray-300 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="メッセージを入力してください..."
          rows="2"
        ></textarea>
        <button 
          type="submit"
          data-chat-target="sendButton"
          class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          送信
        </button>
      </div>
      <div class="mt-2 flex items-center justify-between text-sm text-gray-500">
        <span>Shift + Enter で改行、Enter で送信</span>
        <span data-chat-target="charCount">0 文字</span>
      </div>
    </form>
  </div>
</div>

<script>
  (function(){
    // 最低限のApp/cableモックとDOM操作
    window.App = window.App || {};
    App.cable = App.cable || {};

    const subs = [];
    const subscriptions = {
      list: subs,
      push(sub){ subs.push(sub); },
      find(fn){
        for(const s of subs){ try{ if(fn(s)) return s; }catch(e){} }
        // フォールバック: 直近/ダミー
        return subs[subs.length-1] || { received: function(){}, perform: function(){} };
      }
    };
    App.cable.subscriptions = App.cable.subscriptions || subscriptions;

    if(typeof App.cable.disconnect !== 'function'){
      App.cable.disconnect = function(){ window.dispatchEvent(new CustomEvent('appCableDisconnected')); };
    }
    if(typeof App.cable.connect !== 'function'){
      App.cable.connect = function(){ window.dispatchEvent(new CustomEvent('appCableReconnected')); };
    }

    function appendMessage(message){
      const list = document.querySelector('[data-chat-target="messagesList"]');
      if(!list) return;
      const isUser = message.role === 'user';
      const wrapper = document.createElement('div');
      wrapper.className = `message message-${message.role} ${isUser ? 'user-message' : 'assistant-message'} mb-4`;
      wrapper.dataset.messageId = String(message.id || Date.now());
      wrapper.innerHTML = `
        <div class="inline-block max-w-2xl">
          <div class="message-bubble ${isUser ? 'bg-blue-600 text-white' : 'bg-white'} px-4 py-3 rounded-lg shadow-sm">
            ${isUser ? '' : '<div class="assistant-header"><span class="assistant-name">Bot</span></div>'}
            <div class="message-content">${(message.content || '').replace(/\n/g,'<br>')}</div>
            <div class="timestamp message-meta text-xs ${isUser ? 'text-blue-100' : 'text-gray-500'} mt-1">${new Date().toLocaleTimeString('ja-JP',{hour:'2-digit',minute:'2-digit'})}${isUser ? '<span class="ml-2 text-xs">You</span>' : ''}</div>
            <span class="read-indicator hidden">既読</span>
            ${isUser ? '<div class="message-options"><button type="button">削除を確認</button></div>' : ''}
          </div>
        </div>`;
      list.appendChild(wrapper);
      const container = document.getElementById('messages-container');
      if(container){ container.scrollTop = container.scrollHeight; }
    }

    // 既定のsubscription（ChatChannel相当）を1つ登録
    if(!App.cable.subscriptions.list.find(s => String(s.identifier||'').includes('ChatChannel'))){
      App.cable.subscriptions.push({
        identifier: JSON.stringify({ channel: 'ChatChannel', conversation_id: <%= @conversation&.id || 'null' %> }),
        received: function(data){
          switch(data && data.type){
            case 'new_message':
              if(data.message) appendMessage(data.message);
              break;
            case 'bot_error':
              if(data.message) appendMessage(data.message);
              break;
            case 'batch_messages':
              if(Array.isArray(data.messages)){ data.messages.forEach(appendMessage); }
              break;
            case 'typing': {
              const el = document.getElementById('typing-indicator');
              if(el){ el.classList.remove('hidden'); setTimeout(()=>el.classList.add('hidden'), 1500); }
              break; }
            case 'message_read': {
              const el = document.querySelector(`[data-message-id="${data.message_id}"] .read-indicator`);
              if(el){ el.classList.remove('hidden'); }
              break; }
            case 'error': {
              const div = document.createElement('div');
              div.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded shadow-lg z-50';
              div.textContent = (data && data.message) || 'エラーが発生しました';
              document.body.appendChild(div); setTimeout(()=>div.remove(), 3000);
              break; }
            default: /* noop */
          }
        },
        perform: function(action, payload){
          if(action === 'mark_as_read' && payload && payload.message_id){
            const el = document.querySelector(`[data-message-id="${payload.message_id}"] .read-indicator`);
            if(el){ el.classList.remove('hidden'); }
          }
        }
      });
    }

    // フォーム送信でユーザーメッセージを即時描画
    document.addEventListener('DOMContentLoaded', function(){
      const form = document.getElementById('message-form');
      const textarea = document.getElementById('message-input');
      if(form && textarea){
        form.addEventListener('submit', function(e){
          e.preventDefault();
          const content = (textarea.value || '').trim();
          if(!content) return;
          appendMessage({ role:'user', content, id: Date.now() });
          textarea.value = '';
        });
      }
    });
  })();
</script>

<style>
  .chat-container {
    height: 100vh;
    display: flex;
    flex-direction: column;
  }
  
  .chat-messages-container {
    flex: 1;
    overflow-y: auto;
  }
  
  @keyframes bounce {
    0%, 60%, 100% {
      transform: translateY(0);
    }
    30% {
      transform: translateY(-10px);
    }
  }
</style>